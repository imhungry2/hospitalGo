name: on-container-cicd
# main 브랜치로의 push와 pull request 이벤트가 발생할 때마다 워크플로우가 실행
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: self-hosted
    steps:
      # 1. GitHub Repository Checkout
      - name: Checkout Source Code
        uses: actions/checkout@v4

      # 2. Set up Java (JDK 17)
      - name: Setup JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      # 3. Grant execute permission for gradlew
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      # 4. Build with Gradlew
      - name: Build with Gradlew
        run: ./gradlew clean bootJar

      # 5. Build Docker Image
      - name: Build Docker Image
        run: docker build -t ${{ secrets.DOCKER_USERNAME }}/reservation:latest .

      # 6. Docker Hub Login
      - name: Docker Hub Login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # 7. Push Docker Image to Docker Hub
      - name: Push Docker Image to Docker Hub
        run: docker push ${{ secrets.DOCKER_USERNAME }}/reservation:latest

  deploy:
    needs: build
    runs-on: self-hosted
    steps:
      # 1. Docker Hub Login
      - name: Docker Hub Login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # 2. Stop and Remove Existing Container
      - name: Stop and Remove Existing Container
        run: |
          docker ps -q --filter "name=reservation" | xargs -r docker stop
          docker ps -aq --filter "name=reservation" | xargs -r docker rm

      # 3. Pull Docker Image
      - name: Pull Docker Image
        run: docker pull ${{ secrets.DOCKER_USERNAME }}/reservation:latest

      # 4. Run Docker Container
      - name: Run Docker Container
        run: |
          docker run -d -p 8080:8080 --name reservation \
            -e RDS_URL=${{ secrets.RDS_URL }} \
            -e RDS_USERNAME=${{ secrets.RDS_USERNAME }} \
            -e RDS_PASSWORD=${{ secrets.RDS_PASSWORD }} \
            ${{ secrets.DOCKER_USERNAME }}/reservation:latest

      # 5. Delete Old Docker Images
      - name: Delete Old Docker Images
        run: docker system prune -f